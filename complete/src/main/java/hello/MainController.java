package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import java.util.List;
import java.io.*;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import hello.User;
import hello.UserRepository;
import hello.Store;
import hello.StoreRepository;
import hello.Th;
import hello.ThRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

	private final Logger log = LoggerFactory.getLogger(this.getClass());
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private StoreRepository storeRepository;

	@Autowired // This means to get the bean called userRepository
	private UserRepository userRepository;
	@Autowired // This means to get the bean called userRepository
	private ThRepository thRepository;
	
	@GetMapping("/greeting")
	public String greeting(@RequestParam(name="name", required=false, defaultValue="World") String name, Model model) {
	
	//@GetMapping(path="/greeting") // Map ONLY GET Requests
	//public @ResponseBody String greeting (@RequestParam String name
	//		, @RequestParam String email) {
		//Store soros = new Store();
		List<Store> soros = (List<Store>) storeRepository.findAll();
		//Iterator<Store> iter
	      	//model.addAttribute("name", soros.get(0).getId());
	      	model.addAttribute("name", soros);
		Store alfa = new Store();
		//soros.add(alfa);
		log.debug("debug level log");
		//log.info("info level log");
		//log.info(storeRepository.findAll());
		log.error("error level log");
	      	//model.addAttribute("name", "testing");
	      	return "greeting";
	      	//return "saved";
	}
	
	@GetMapping(path="/addStore") // Map ONLY GET Requests
	public @ResponseBody String addNewStore (@RequestParam String name
	//public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Store n = new Store();
		//User n = new User();
		n.setName(name);
		n.setEmail(email);
		storeRepository.save(n);
		//userRepository.save(n);
		return "Saved";
	}
	@GetMapping(path="/addUser") // Map ONLY GET Requests
	//public @ResponseBody String addNewStore (@RequestParam String name
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		//Store n = new Store();
		String jsonString = "{\"k1\":\"v1\",\"k2\":\"v2\"}";
		User n = new User();
		ObjectMapper mapper = new ObjectMapper();
		try {
			//JsonNode actualObj = mapper.readTree(json);
			JsonNode actualObj = mapper.readTree(jsonString);
			JsonNode aK1 = actualObj.get("k1");
			n.setName(aK1.asText());
			log.error(aK1.asText());
			//log.error(actualObj.get(0).textValue());
		} catch (IOException e) {
			throw new RuntimeException("Error :" + e);
			}
		//n.setName(name);
		n.setEmail(email);
		//storeRepository.save(n);
		userRepository.save(n);
		return "Saved";
	}
	@GetMapping(path="/addTh") // Map ONLY GET Requests
	//public @ResponseBody String addNewStore (@RequestParam String name
	public @ResponseBody String addNewTh (@RequestParam String json, @RequestParam Integer SubId
			, @RequestParam String TimeStamps, @RequestParam Integer Value) 
		/*throws JsonParseException, IOException*/ {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		//Store n = new Store();
		Th n = new Th();
		String jsonString = "{\"k1\":\"v1\",\"k2\":\"v2\"}";
		ObjectMapper mapper = new ObjectMapper();
		try {
			//JsonNode actualObj = mapper.readTree(json);
			JsonNode actualObj = mapper.readTree(jsonString);
			JsonNode aK1 = actualObj.get("k1");
			n.setTimeStamps(aK1.asText());
			//log.error(actualObj.get(0).textValue());
		} catch (IOException e) {
			throw new RuntimeException("Error :" + e);
			}
		n.setSubId(SubId);
		//n.setTimeStamps(TimeStamps);
		n.setValue(Value);
		//storeRepository.save(n);
		thRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/readStore")
	public @ResponseBody Iterable<Store> getAllStores() {
	//public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return storeRepository.findAll();
		//return userRepository.findAll();
	}
	@GetMapping(path="/readUser")
	//public @ResponseBody Iterable<Store> getAllStores1() {
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		//return storeRepository.findAll();
		return userRepository.findAll();
	}
	@GetMapping(path="/readTh")
	//public @ResponseBody Iterable<Store> getAllStores1() {
	public @ResponseBody Iterable<Th> getAllTh() {
		// This returns a JSON or XML with the users
		//return storeRepository.findAll();
		return thRepository.findAll();
	}
}
